/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2019 Daniel Ochieng' Olanga.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'maven'
    id "com.diffplug.gradle.spotless" version "3.24.3"
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "net.ltgt.errorprone" version "0.8.1"
    id 'net.saliman.cobertura' version '2.6.1'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

group = project.group
version = project.version

sourceSets {
    main {
        java {
            srcDir 'src/internal-http/java'
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Xlint:-processing"
    options.encoding = 'UTF-8'

    options.errorprone {
        // This check is broken in Java 12.  See https://github.com/google/error-prone/issues/1257
        if ((JavaVersion.current().majorVersion as Integer) > 11) {
            check('Finally', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
        }
    }
}

compileJava {
    options.compilerArgs << "-Werror"
}

configurations.all {
}

ext {
    caffeineVersion = '2.8.0'
    errorProneCoreVersion = '2.3.3'
    errorProneJavacVersion = '9+181-r4173-1'
    guavaVersion = '28.0-jre'
    gsonVersion = '2.8.5'
    junitVersion = '5.5.2'
    logbackVersion = '1.2.3'
    slf4jVersion = '1.7.28'
    vavrVersion = '0.10.2'
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    implementation group: 'io.vavr', name: 'vavr', version: vavrVersion
    errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: errorProneCoreVersion
    errorproneJavac group: 'com.google.errorprone', name: 'javac', version: errorProneJavacVersion
    implementation group: 'com.google.guava', name: 'guava', version: guavaVersion
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: caffeineVersion
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

spotless {
    java {
        googleJavaFormat('1.7')
        removeUnusedImports()
    }
}

cobertura {
    coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
    coverageIgnoreTrivial = true // ignore getters/setters in coverage report
    coverageIgnoreMethodAnnotations = ["java.lang.Deprecated", "lombok.Generated"]
}

lombok {
    version = "1.18.10"
    sha256 = ""
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok/main")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

task delombokTest(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok/test")
    outputs.dir(outputDir)
    sourceSets.test.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

task delombokHelp(type: DelombokTask) {
    args "--help"
}