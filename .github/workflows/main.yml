# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test-build-publish-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup Java 11
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Setup cache
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Run tests
      - name: Run tests
        run: ./gradlew test
        env:
          MPESA4J_ACCOUNT_BALANCE_QUEUE_TIMEOUT_URL: ${{ secrets.MPESA4J_ACCOUNT_BALANCE_QUEUE_TIMEOUT_URL }}
          MPESA4J_ACCOUNT_BALANCE_RESULT_URL: ${{ secrets.MPESA4J_ACCOUNT_BALANCE_RESULT_URL }}
          MPESA4J_B2B_BALANCE_RESULT_URL: ${{ secrets.MPESA4J_B2B_BALANCE_RESULT_URL }}
          MPESA4J_B2B_QUEUE_TIMEOUT_URL: ${{ secrets.MPESA4J_B2B_QUEUE_TIMEOUT_URL }}
          MPESA4J_B2C_BALANCE_RESULT_URL: ${{ secrets.MPESA4J_B2C_BALANCE_RESULT_URL }}
          MPESA4J_B2C_QUEUE_TIMEOUT_URL: ${{ secrets.MPESA4J_B2C_QUEUE_TIMEOUT_URL }}
          MPESA4J_CONSUMER_KEY: ${{ secrets.MPESA4J_CONSUMER_KEY }}
          MPESA4J_CONSUMER_SECRET: ${{ secrets.MPESA4J_CONSUMER_SECRET }}
          MPESA4J_DEBUG: ${{ secrets.MPESA4J_DEBUG }}
          MPESA4J_HTTP_CONNECTION_TIMEOUT: ${{ secrets.MPESA4J_HTTP_CONNECTION_TIMEOUT }}
          MPESA4J_HTTP_READ_TIMEOUT: ${{ secrets.MPESA4J_HTTP_READ_TIMEOUT }}
          MPESA4J_INITIATOR_NAME: ${{ secrets.MPESA4J_INITIATOR_NAME }}
          MPESA4J_INITIATOR_SECURITY_CREDENTIAL: ${{ secrets.MPESA4J_INITIATOR_SECURITY_CREDENTIAL }}
          MPESA4J_INITIATOR_SHORTCODE: ${{ secrets.MPESA4J_INITIATOR_SHORTCODE }}
          MPESA4J_LIPA_NA_MPESA_CALLBACK_URL: ${{ secrets.MPESA4J_LIPA_NA_MPESA_CALLBACK_URL }}
          MPESA4J_LIPA_NA_MPESA_PASSKEY: ${{ secrets.MPESA4J_LIPA_NA_MPESA_PASSKEY }}
          MPESA4J_LIPA_NA_MPESA_SHORTCODE: ${{ secrets.MPESA4J_LIPA_NA_MPESA_SHORTCODE }}
          MPESA4J_SANDBOX_ENABLED: ${{ secrets.MPESA4J_SANDBOX_ENABLED }}
          MPESA4J_TRANSACTION_QUERY_QUEUE_TIMEOUT_URL: ${{ secrets.MPESA4J_TRANSACTION_QUERY_QUEUE_TIMEOUT_URL }}
          MPESA4J_TRANSACTION_QUERY_RESULT_URL: ${{ secrets.MPESA4J_TRANSACTION_QUERY_RESULT_URL }}
          MPESA4J_TRANSACTION_REVERSAL_QUEUE_TIMEOUT_URL: ${{ secrets.MPESA4J_TRANSACTION_REVERSAL_QUEUE_TIMEOUT_URL }}
          MPESA4J_TRANSACTION_REVERSAL_RESULT_URL: ${{ secrets.MPESA4J_TRANSACTION_REVERSAL_RESULT_URL }}

      # Build with gradlew
      - name: Build with gradlew
        run: ./gradlew build

      # The USERNAME and TOKEN need to correspond to the credentials environment variables used in
      # the publishing section of your build.gradle
      - name: Publish to GitHub Packages
        run: gradle publish
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
